#coding=utf-8

 #477. Total Hamming Distance:
 #两数之间的海明距离是指对应bit位的数字不同的位数
class Solution(object):
    def totalHammingDistance(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #输出为二进制字符串，bin(num) is unnessary
        # ['00000000000000000000000000000100', '00000000000000000000000000001110', '00000000000000000000000000000010']
        print map('{:032b}'.format, nums) #3 01str in a list, 0填充
        #,(默认)字符串默认左对齐，二进制数字右对齐 '{:*^32}'*^居中，>右，<左, 0前填充0
        # [('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '0', '0'), ('0', '1', '0'), ('1', '1', '0'), ('0', '1', '1'), ('0', '0', '0')]
        print zip(*map('{:032b}'.format, nums)) #32 tuples in a list
        #95.55%!
        return sum(b.count('0') * b.count('1') for b in zip(*map('{:032b}'.format, nums)))
        #count0 * count1 : 111:3*0=0; 110: 2*1=2; 100: 2; 000: 0*3=0 每个位上必2或0 （combination logic）见java里的组合逻辑解说
print Solution().totalHammingDistance([4, 14, 2]) #6